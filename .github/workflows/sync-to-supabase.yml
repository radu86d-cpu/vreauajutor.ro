name: Sync repo ZIP to Supabase (full)

on:
  push:
    branches: [ main, master, "**" ]
  workflow_dispatch:

jobs:
  upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute meta
        id: meta
        run: |
          set -euo pipefail
          SHA=$(git rev-parse --short HEAD)
          FULL_SHA=$(git rev-parse HEAD)
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          REPO="${GITHUB_REPOSITORY##*/}"
          BRANCH="${GITHUB_REF_NAME}"

          # GITHUB_REF_TYPE can be 'branch' or 'tag'
          REF_TYPE="${GITHUB_REF_TYPE:-branch}"
          TAG_NAME=""
          if [ "$REF_TYPE" = "tag" ]; then
            TAG_NAME="$GITHUB_REF_NAME"
          fi

          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "full_sha=$FULL_SHA" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT
          echo "repo=$REPO" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "ref_type=$REF_TYPE" >> $GITHUB_OUTPUT
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Build .zipignore
        run: |
          {
            echo ".git/*"
            echo ".github/*"
            echo "node_modules/*"
            echo "dist/*"
            echo "build/*"
            echo ".env"
            echo ".env.*"
            echo ".DS_Store"
            echo "*.log"
            echo "*.tmp"
            echo "tmp/*"
            echo ".vscode/*"
            echo ".idea/*"
          } > .zipignore

      - name: Create ZIP
        run: |
          set -euo pipefail
          zip -r repo.zip . -x@.zipignore

      - name: Compute checksum & size
        id: sums
        run: |
          set -euo pipefail
          SHA256=$(sha256sum repo.zip | awk '{print $1}')
          SIZE_BYTES=$(stat -c%s repo.zip)
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          echo "size_bytes=$SIZE_BYTES" >> $GITHUB_OUTPUT

      - name: Create manifest.json
        run: |
          cat > manifest.json <<EOF
          {
            "repo": "${{ steps.meta.outputs.repo }}",
            "commit_short": "${{ steps.meta.outputs.sha }}",
            "commit_full": "${{ steps.meta.outputs.full_sha }}",
            "pushed_at": "${{ steps.meta.outputs.date }}",
            "branch": "${{ steps.meta.outputs.branch }}",
            "ref_type": "${{ steps.meta.outputs.ref_type }}",
            "tag": "${{ steps.meta.outputs.tag }}",
            "artifact": "repo.zip",
            "artifact_size_bytes": ${{
              steps.sums.outputs.size_bytes
            }},
            "artifact_sha256": "${{ steps.sums.outputs.sha256 }}"
          }
          EOF

      - name: Upload build artifacts (for debugging/download)
        uses: actions/upload-artifact@v4
        with:
          name: repo-${{ steps.meta.outputs.sha }}
          path: |
            repo.zip
            manifest.json
          if-no-files-found: error
          retention-days: 7

      - name: Define upload targets
        id: targets
        run: |
          set -euo pipefail
          COMMIT_ZIP="archives/${{ steps.meta.outputs.sha }}.zip"
          COMMIT_MAN="archives/${{ steps.meta.outputs.sha }}.manifest.json"
          BRANCH_SAFE="$(echo "${{ steps.meta.outputs.branch }}" | tr '/' '_')"
          BRANCH_ZIP="branches/${BRANCH_SAFE}.zip"
          BRANCH_MAN="branches/${BRANCH_SAFE}.manifest.json"
          LATEST_ZIP="latest.zip"
          LATEST_MAN="latest.manifest.json"

          echo "commit_zip=$COMMIT_ZIP" >> $GITHUB_OUTPUT
          echo "commit_man=$COMMIT_MAN" >> $GITHUB_OUTPUT
          echo "branch_zip=$BRANCH_ZIP" >> $GITHUB_OUTPUT
          echo "branch_man=$BRANCH_MAN" >> $GITHUB_OUTPUT
          echo "latest_zip=$LATEST_ZIP" >> $GITHUB_OUTPUT
          echo "latest_man=$LATEST_MAN" >> $GITHUB_OUTPUT

      - name: Upload to Supabase Storage (commit-stamped)
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
          SUPABASE_BUCKET: ${{ secrets.SUPABASE_BUCKET }}
        run: |
          set -euo pipefail
          upload() {
            local SRC="$1"
            local DEST="$2"
            local TYPE_OPT="$3" # optional: ";type=application/json"

            for i in 1 2 3; do
              HTTP_CODE=$(curl -sS -o /tmp/resp -w "%{http_code}" -X POST \
                "${SUPABASE_URL%/}/storage/v1/object/${SUPABASE_BUCKET}/${DEST}" \
                -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE}" \
                -H "x-upsert: true" \
                -F "file=@${SRC}${TYPE_OPT}")
              if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
                echo "OK ${DEST}"
                return 0
              fi
              echo "Attempt $i failed ($HTTP_CODE) for ${DEST}"
              cat /tmp/resp || true
              sleep 2
            done
            echo "Upload failed for ${DEST}"; exit 1
          }

          upload repo.zip     "${{ steps.targets.outputs.commit_zip }}" ""
          upload manifest.json "${{ steps.targets.outputs.commit_man }}" ";type=application/json"

      - name: Upload to Supabase Storage (branch pointers)
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
          SUPABASE_BUCKET: ${{ secrets.SUPABASE_BUCKET }}
        run: |
          set -euo pipefail
          upload() {
            local SRC="$1"; local DEST="$2"; local TYPE_OPT="$3"
            HTTP_CODE=$(curl -sS -o /tmp/resp -w "%{http_code}" -X POST \
              "${SUPABASE_URL%/}/storage/v1/object/${SUPABASE_BUCKET}/${DEST}" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE}" \
              -H "x-upsert: true" \
              -F "file=@${SRC}${TYPE_OPT}")
            [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ] || { echo "Upload $DEST failed ($HTTP_CODE)"; cat /tmp/resp; exit 1; }
          }

          upload repo.zip      "${{ steps.targets.outputs.branch_zip }}" ""
          upload manifest.json "${{ steps.targets.outputs.branch_man }}" ";type=application/json"

      - name: Update latest pointers
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
          SUPABASE_BUCKET: ${{ secrets.SUPABASE_BUCKET }}
        run: |
          set -euo pipefail
          upload() {
            local SRC="$1"; local DEST="$2"; local TYPE_OPT="$3"
            HTTP_CODE=$(curl -sS -o /tmp/resp -w "%{http_code}" -X POST \
              "${SUPABASE_URL%/}/storage/v1/object/${SUPABASE_BUCKET}/${DEST}" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE}" \
              -H "x-upsert: true" \
              -F "file=@${SRC}${TYPE_OPT}")
            [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ] || { echo "Upload $DEST failed ($HTTP_CODE)"; cat /tmp/resp; exit 1; }
          }

          upload repo.zip      "${{ steps.targets.outputs.latest_zip }}" ""
          upload manifest.json "${{ steps.targets.outputs.latest_man }}" ";type=application/json"